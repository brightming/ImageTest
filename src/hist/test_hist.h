#ifndef TEST_HIST_H
#define TEST_HIST_H



typedef struct cSize{
        cSize():width(0),height(0){}
        cSize(int width_o,int height_o):width(width_o),height(height_o){

        }
        cSize& operator=(const cSize& other){
                width=other.width;
                height=other.height;
                return *this;
        }
        int width;
        int height;
}cSize;

typedef  struct {
    float ratio_w;
    float ratio_h;
}scale;


/**
 * 快速解决的思路是：
 * 根据托盘在不同距离放置时的大概大小，将图片按照远近划分为不同的子区域，对各个子区域
 * 进行各自的缩放，目的是让托盘的大小接近窗口的大小。
 * 但是由于，托盘的大小有不同，也有误差，
 * 我们不能保证缩放到的托盘的大小就是合适的，
 * 需要对于每个区域进行额外的处理：
 * 扫描该区域放大一定倍数的图片，以及缩小一定倍数的图片，找目标物。
 * 不是让全部区域采取一定的缩放比例是因为，各个区域的特点不一样，如距离摄像头较近的，有可能要缩小，
 * 而距离摄像头较远的，本来就很小了，可能的操作应该是要放大。
 *
 *
 */
typedef struct{
        float max_scale;  //为了让不同大小的托盘，在不同的区域放置时，有一定的适应性，需要对划分的该区域作一定的缩放。
        float min_scale;
        float step;
}adapter_scale;

typedef struct
{
        int	  startX;			    //图像起始点 x 坐标
        int     startY;			    //图像起始点 y 坐标
        int     width;			    // 图像宽度
        int     height;			    // 图像高度
        int     auto_scale;           // 自动缩放 ,0:手动缩放, 1: 自动缩放
        scale  manual_scale;      // 手动缩放系数次数
        int     winWidth;            // 滑动窗口宽度
        int     winHeight;           // 滑动窗口高度
        cSize  winStride;
        cSize  blockSize;
        cSize  blockStride;
        cSize  cellSize;
        int     pixCorrect;        // 像素修正值
        adapter_scale adascale;      //
}ResizeParamTab;

typedef struct scale_conf
{
        float scale;      //绽放系数
        int rowscale;   //水平方向缩放
        int colscale;    //垂直方向缩放
}scale_conf;

typedef struct
{
    float scaleConfX; //水平多次缩放系数
    float scaleConfY; //垂直多次缩放系数
}conf_talbe;

//图像多次缩放参数表
const conf_talbe conf_talbeTab[]=
{
    {1.0,1.0},{1.01,0.99},{1.015,1.0},{1.02,1.0},{1.025,1.0},{1.03,1.0},{1.035,1.0},{1.04,1.0},{1.045,1.0},{1.05,1.0},{1.055,1.0},{1.06,1.0},
};

// 图像缩放配置参数表
const ResizeParamTab resizeParamTab[] =
{

// 1.8米高，倾斜45度,0.6m(宽)*0.8m(长)*0.12m(高)托架配置表
           {355,     1490,       330,    300/*360*/,     0,               {10.50,0.26}/*{10.39,0.26}*/,              64,              16,       {8,4},      {16,16},    {8,4},        {8,8},      0,  {1.2,0.7,1.05}},  // 0.3m ~0.6m
           {355,     1140,       330,     400/*320*/,     0,              {8.77,0.29},              64,              16,       {8,4},      {8,8},    {8,4},        {8,8},      0,   {1.2,0.6,1.05}},  // 0.7m ~1.2m
           {355,     980,      330,     260,     0,                 {7.6,0.28},             64,              16,       {8,4},      {16,16},    {4,4},        {8,8},     0,            {1.2,0.7,1.15}},  // 1.3m ~1.6m
           {355,       810,      330,     300,     0,               {6.625,0.28},             64,              16,       {8,4},      {16,16},    {4,4},        {8,8},       0,        {1.2,0.7,1.15}},  // 1.7m ~2.1m
           {355,       600,      330,     370,     0,               {5.62,0.271}/*{5.59,0.271}*/,             64,              16,       {8,4},      {16,16},    {4,4},        {8,8},       0         ,{1.3,0.7,1.05}},  // 2.2m ~2.8m
           {355,     530,      330,     290,     0,              {4.76,0.36},              64,              16,       {8,4},      {16,16},    {8,4},        {8,8},       4           ,{1.2,0.8,1.05}},  // 2.9m ~3.5m
           {355,     450,       330,     280,      0,            {4.08,0.35},                64,              16,       {8,4},      {16,16},    {4,4},      {8,8},      6            ,{1.2,0.8,1.05}},  // 3.6m ~4.2m
           {355,     390,       330,     240,      0,            {3.61,0.458},               64,             16,        {8,4},      {16,16},   {8,4},         {8,8},      5          ,{1.2,0.9,1.05}},  // 4.3m ~4.9m
           {355,     320,       330,     270,     0,             {2.9,0.516},               64,             16,        {8,4},      {16,16},   {8,4},         {8,8},      6           ,{1.3,0.8,1.05}},  // 5.0m ~5.9m
           {355,     270,       390,     270,     0,             {2.72,0.58},               64,             16,        {8,4},      {16,16},   {8,4},         {8,8},      6            ,{1.5,0.7,1.05}},  // 6.0m ~6.9m
           {355,     230,        370,     120,     0,            {2.02,0.625}/*{2.32,0.625}*/,               64,             16,        {8,4},      {16,16},   {4,4},         {8,8},      6           ,{1.4,0.7,1.05}},  // 7.0m ~7.7m
           {355,     150,         330,     130,     0,           {2.185,0.59},               64,             16,        {8,4},      {16,16},   {4,4},         {8,8},      6           ,{1.5,0.7,1.05}},  // 7.8m ~8.5m

};

const int recordNumber = sizeof(resizeParamTab) / sizeof(resizeParamTab[0]);



#endif // TEST_HIST_H

